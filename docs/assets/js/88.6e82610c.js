(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{306:function(t,a,s){"use strict";s.r(a);var e=s(5),r=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 模块")]),t._v(" "),s("h2",{attrs:{id:"模块的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模块的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 模块的实现")]),t._v(" "),s("p",[t._v("在 Node 中引入模块，需要经历 3 个阶段：")]),t._v(" "),s("ul",[s("li",[t._v("路径分析")]),t._v(" "),s("li",[t._v("文件定位")]),t._v(" "),s("li",[t._v("编译执行")])]),t._v(" "),s("p",[t._v("在 Node 中，模块主要分为两类，一类是 Node 提供的模块，称为核心模块，另一类是用户编写的模块，称为文件模块。")]),t._v(" "),s("h3",{attrs:{id:"优先从缓存加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先从缓存加载","aria-hidden":"true"}},[t._v("#")]),t._v(" 优先从缓存加载")]),t._v(" "),s("p",[t._v("Node 对引入过的模块都会进行缓存，以减少二次引入时的开销，Node 缓存的是编译和执行之后的对象。不论是核心模块还是文件模块，require() 方法对相同模块的二次加载都遵循缓存优先的原则。")]),t._v(" "),s("h3",{attrs:{id:"路径分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#路径分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 路径分析")]),t._v(" "),s("p",[t._v("基于 require() 方法接受的标识符进行分析，模块标识符主要分类以下几类：")]),t._v(" "),s("ul",[s("li",[t._v("核心模块， http, fs, path 等")]),t._v(" "),s("li",[s("code",[t._v(".")]),t._v(" 或 "),s("code",[t._v("..")]),t._v(" 开始的相对路径文件")]),t._v(" "),s("li",[s("code",[t._v("/")]),t._v(" 开始的绝对路径文件")]),t._v(" "),s("li",[t._v("非路径形式的文件模块，如自定义的 connect 模块")])]),t._v(" "),s("h4",{attrs:{id:"核心模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#核心模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 核心模块")]),t._v(" "),s("p",[t._v("用户无法加载一个与核心模块同名的自定义模块，除非选择一个不同的标识符或者换用路径。")]),t._v(" "),s("h4",{attrs:{id:"文件模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件模块")]),t._v(" "),s("p",[t._v("以 "),s("code",[t._v(".")]),t._v(" 、"),s("code",[t._v("..")]),t._v(" 和 "),s("code",[t._v("/")]),t._v(" 开始的标识符，都会被当做文件模块来处理。在分析模块的路径时，require() 方法会将路径转化为真实路径，并以真实路径作为索引，将编译执行后的结果存放到缓存中。")]),t._v(" "),s("h4",{attrs:{id:"自定义模块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义模块","aria-hidden":"true"}},[t._v("#")]),t._v(" 自定义模块")]),t._v(" "),s("p",[t._v("自定义模块指的是非核心模块，也不是路径形式的标识符。它是一种特殊的文件模块，可能是一个文件或者包的形式。在加载过程中，Node 会逐个尝试模块路径中的路径，直到找到目标文件为止。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("模块路径")]),t._v("\n模块路径是 Node 在定位文件模块的具体文件时定制的查找策略，表现为一个由路径组成的数组。如 Linux 下可能是这样的：\n['/Users/test/Desktop/project/node_modules',\n'/Users/test/Desktop/node_modules',\n'/Users/test/node_modules',\n'/Users/node_modules',\n'/node_modules' ]")])]),t._v(" "),s("h3",{attrs:{id:"文件定位"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件定位","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件定位")]),t._v(" "),s("h4",{attrs:{id:"文件扩展名分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件扩展名分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件扩展名分析")]),t._v(" "),s("p",[t._v("require() 在分析标识符的时候，会出现标识符中不包含文件扩展名的情况，这时， Node 会按 "),s("code",[t._v(".js")]),t._v(" ，"),s("code",[t._v(".node")]),t._v("， "),s("code",[t._v(".json")]),t._v(" 的次序补足扩展名，依次尝试。")]),t._v(" "),s("p",[t._v("在尝试的过程中，需要调用 fs 模块同步阻塞式地判断文件是否存在。因为 Node 是单线程的， 所以这里是一个会引起性能问题的地方。有一个小诀窍：如果是 "),s("code",[t._v(".node")]),t._v(" 和 "),s("code",[t._v(".json")]),t._v(" 文件，在传递给 require() 的标识符中带上扩展名，会加快一点速度。")]),t._v(" "),s("h4",{attrs:{id:"目录分析和包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录分析和包","aria-hidden":"true"}},[t._v("#")]),t._v(" 目录分析和包")]),t._v(" "),s("p",[t._v("在分析标识符的过程中，require() 通过分析文件扩展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时 Node 会将这个目录当做一个包来处理。")]),t._v(" "),s("p",[t._v("然后， Node 在当前目录（查找到的包目录）下查找 package.json，通过 JSON.parse() 解析出包描述对象，从中取出 main 属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。")]),t._v(" "),s("p",[t._v("而如果 main 属性指定的文件名错误，或者压根没有 package.json 文件，Node 会将 index 当做默认文件名，然后依次查找 index.js、index.node、index.json。")]),t._v(" "),s("p",[t._v("如果在目录分析的过程中没有定位成功任何文件，则自定义模块进入下一个模块路径进行查找。如果模块路径数组都被遍历完毕，依然没有查找到目标文件，则会抛出查找失败的异常。")]),t._v(" "),s("h3",{attrs:{id:"编译执行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译执行","aria-hidden":"true"}},[t._v("#")]),t._v(" 编译执行")]),t._v(" "),s("p",[t._v("编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node 会新建一个模块对象，然后根据路径载入并编译。对于不同的文件扩展名，其载入方法也有所不同，具体如下所示。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v(".js")]),t._v(" 文件。通过 fs 模块同步读取文件后编译执行。")]),t._v(" "),s("li",[s("code",[t._v(".node")]),t._v(" 文件。这是用 C/C++ 编写的扩展文件，通过 "),s("code",[t._v("dlopen()")]),t._v(" 方法加载最后编译生成的文件。")]),t._v(" "),s("li",[s("code",[t._v(".json")]),t._v(" 文件。通过 fs 模块同步读取文件后，用 "),s("code",[t._v("JSON.parse()")]),t._v(" 解析返回结果。")]),t._v(" "),s("li",[t._v("其余扩展名文件。它们都被当做 "),s("code",[t._v(".js")]),t._v(" 文件载入。 每一个编译成功的模块都会将其文件路径作为索引缓存在 "),s("code",[t._v("Module._cache")]),t._v(" 对象上，以提高二 次引入的性能。")])]),t._v(" "),s("h4",{attrs:{id:"javascript-模块的编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-模块的编译","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript 模块的编译")]),t._v(" "),s("p",[t._v("我们知道每个模块文件中存在着 require、exports、module 这 3 个变量，但是它们在模块文件中并没有定义，那么从何而来呢？甚至在 Node 的 API 文档中，我们 道每个模块中还有 "),s("code",[t._v("__filename")]),t._v(" 、"),s("code",[t._v("__dirname")]),t._v(" 这两个变量的存在，它们又是从何而来的呢？")]),t._v(" "),s("p",[t._v("事实上，在编译的过程中，Node 对获取的 JavaScript 文件内容进行了头尾包装。在头部添加 了 "),s("code",[t._v("(function (exports, require, module, __filename, __dirname) {\\n")]),t._v("，在尾部添加了 "),s("code",[t._v("\\n});")]),t._v("。 一个正常的 JavaScript 文件会被包装成如下的样子：")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" require"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __dirname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" math "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'math'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("area")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("radius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PI")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" radius"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加")]),t._v("\n")])])]),s("p",[t._v("这样每个模块文件之间都进行了作用域隔离。包装之后的代码会通过 vm 原生模块的 runInThisContext() 方法执行（类似 eval，只是具有明确上下文，不污染全局），返回一个具体的 "),s("code",[t._v("function 对象")]),t._v("。最后，将当前模块对象的 exports 属性、require() 方法、module（模块对象自身），以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个 "),s("code",[t._v("function()")]),t._v(" 执行。")]),t._v(" "),s("p",[t._v("这就是这些变量并没有定义在每个模块文件中却存在的原因。在执行之后，模块的 exports 属性被返回给了调用方。exports 属性上的任何方法和属性都可以被外部调用到，但是模块中的其余变量或属性则不可直接被调用。")]),t._v(" "),s("h4",{attrs:{id:"关于-exports-和-module-exports"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-exports-和-module-exports","aria-hidden":"true"}},[t._v("#")]),t._v(" 关于 exports 和 module.exports")]),t._v(" "),s("p",[t._v("此外，许多初学者都曾经纠结过为何存在 exports 的情况下，还存在 module.exports。理想情 况下，只要赋值给 exports 即可：")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("但是通常都会得到一个失败的结果。其原因在于，exports 对象是通过形参的方式传入的，直接赋值形参会改变形参的引用，但并不能改变作用域外的值。如果要达到 require 引入一个类的效果，请赋值给 module.exports 对象，这个迂回的方案不改变形参的引用。")]),t._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])},[],!1,null,null,null);a.default=r.exports}}]);