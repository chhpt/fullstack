(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{258:function(t,a,s){t.exports=s.p+"assets/img/equal.8a70648b.png"},374:function(t,a,s){"use strict";s.r(a);var e=s(5),n=Object(e.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"javascript-基础语法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-基础语法","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript 基础语法")]),t._v(" "),e("p",[t._v("基础部分主要包含 JavaScript 中的基本概念，主要包含")]),t._v(" "),e("ul",[e("li",[t._v("语法")]),t._v(" "),e("li",[t._v("变量类型")]),t._v(" "),e("li",[t._v("语句")]),t._v(" "),e("li",[t._v("操作符")]),t._v(" "),e("li",[t._v("作用域")])]),t._v(" "),e("h2",{attrs:{id:"javascript-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript 数据类型")]),t._v(" "),e("p",[t._v("JavaScript 有两种数据类型：基本类型和引用类型，基本类型包含 Undefined、Null、Boolean、Number 和 String 等五种值，引用类型有 Object、Array、Function、RegExp、Date 和基本包装类型（Number，Boolean，String）等几种。")]),t._v(" "),e("h2",{attrs:{id:"null-和-undefined"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined","aria-hidden":"true"}},[t._v("#")]),t._v(" null 和 undefined")]),t._v(" "),e("p",[e("code",[t._v("null")]),t._v(" 表示此处没有值，是一个特殊的引用对象，典型用法是：")]),t._v(" "),e("ul",[e("li",[t._v("作为函数的参数，表示该函数的参数不是对象")]),t._v(" "),e("li",[t._v("作为对象原型链的终点")])]),t._v(" "),e("p",[e("code",[t._v("undefined")]),t._v(" 表示还没有定义值。典型用法是：")]),t._v(" "),e("ul",[e("li",[t._v("变量被声明了，但没有赋值时，就等于 "),e("code",[t._v("undefined")])]),t._v(" "),e("li",[t._v("调用函数时，应该提供的参数没有提供，该参数等于 "),e("code",[t._v("undefined")])]),t._v(" "),e("li",[t._v("对象没有赋值的属性，该属性的值为 "),e("code",[t._v("undefined")])]),t._v(" "),e("li",[t._v("函数没有返回值时，默认返回 "),e("code",[t._v("undefined")]),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"基本类型和引用数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和引用数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本类型和引用数据类型")]),t._v(" "),e("p",[t._v("在 JavaScript 中基本类型是按值访问的，可以直接进行修改，拷贝等操作，而引用类型是按引用访问的 \b，我们 \b 存在变量 \b 中的也只是一个指向实际值得引用，当我们对变量进行操作时，操作的也不是实际的值而只是值的引用。")]),t._v(" "),e("ul",[e("li",[t._v("基本类型的值是不可变，引用类型的值可以改变。")]),t._v(" "),e("li",[t._v("引用类型可以添加属性，而基本类型不行。")]),t._v(" "),e("li",[t._v("复制时，基本类型复制的是值，而引用类型复制的是引用指针。")]),t._v(" "),e("li",[t._v("在传递参数时，基本类型传递的是值，而引用类型传递的是引用指针。")])]),t._v(" "),e("p",[t._v("1\b 是基本类型，Number(1) 是基本包装类型，他们属于不同的类型，使用 typeof 判断时得到的结果也不一样。")]),t._v(" "),e("div",{staticClass:"language-JavaScript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("PS: Number(1) 为强制类型转化，"),e("code",[t._v("typeof Number(1)")]),t._v(" 为 "),e("code",[t._v("'number'")]),t._v("。")]),t._v(" "),e("h3",{attrs:{id:"扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 扩展")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("undefined 与 null 的区别"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://www.jianshu.com/p/ec77f3315203",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript(三)：基本类型和引用类型的区别"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://segmentfault.com/q/1010000007552319",target:"_blank",rel:"noopener noreferrer"}},[t._v("在 javascript 中，1 与 Number(1) 有什么区别"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"变量声明提升"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量声明提升","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量声明提升")]),t._v(" "),e("p",[t._v("变量提升，是指可以在变量未声明时就能访问变量的一种情况，此时变量的值为 undefined。")]),t._v(" "),e("div",{staticClass:"language-Javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("结果将是 "),e("code",[t._v("undefined")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"和"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("==")]),t._v(" 和 "),e("code",[t._v("===")])]),t._v(" "),e("p",[e("code",[t._v("==")]),t._v(" 表示相等，在进行比较时会发生类型转换，"),e("code",[t._v("===")]),t._v(" 表示严格等于，在进行比较时不发生类型转换。使用 "),e("code",[t._v("==")]),t._v(" 在比较时会转换变量的类型（强制类型转换），将变量转换成相似的类型，再进行比较，如 "),e("code",[t._v("'5'")]),t._v(" 转换成 "),e("code",[t._v("5")]),t._v("，"),e("code",[t._v("false")]),t._v(" 转换成 "),e("code",[t._v("0")]),t._v(" 等。使用 "),e("code",[t._v("===")]),t._v(" 则不会有类型转换，只有两个变量类型相同并且值相等才会返回 "),e("code",[t._v("true")]),t._v("。")]),t._v(" "),e("p",[t._v("转换规则")]),t._v(" "),e("ul",[e("li",[t._v("如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值，false 转换为 0，而 true 转换为 1")]),t._v(" "),e("li",[t._v("如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值。")]),t._v(" "),e("li",[t._v("如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较")]),t._v(" "),e("li",[t._v("null 和 undefined 是相等的。")]),t._v(" "),e("li",[t._v("要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。")]),t._v(" "),e("li",[t._v("如果有一个操作数是 NaN，则相等操作符返回 false，而不相等操作符返回 true。即使两个操作数都是 NaN，相等操作符也返回 false。因为按照规则，NaN 不等于 NaN。")]),t._v(" "),e("li",[t._v("如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true；否则，返回 false。")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 布尔值转换")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'false'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串转换")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined，null 和 NaN")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" undefined"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" undefined"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),e("h2",{attrs:{id:"宿主对象和原生对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#宿主对象和原生对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 宿主对象和原生对象")]),t._v(" "),e("p",[t._v("宿主对象是指 DOM 和 BOM 等由宿主框架通过某种机制注册到 JavaScript 引擎中的对象。原生对象是 Object、Function、Array、String、Boolean、Number、Date、RegExp、Error、Math 等 ECMAScript 官方定义的对象。")]),t._v(" "),e("h2",{attrs:{id:"let-和-var"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-和-var","aria-hidden":"true"}},[t._v("#")]),t._v(" let 和 var")]),t._v(" "),e("ol",[e("li",[t._v("var 是函数级作用域，let 是块级作用域。")]),t._v(" "),e("li",[t._v("var 存在变量提升，let 不存在变量提升。")]),t._v(" "),e("li",[t._v("因为变量提升的问题，var 在 for 循环中会有闭包引用的问题，而 let 不会存在。")])]),t._v(" "),e("h2",{attrs:{id:"判断变量是否数组类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判断变量是否数组类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 判断变量是否数组类型")]),t._v(" "),e("div",{staticClass:"language-JavaScript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isArray"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Array"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isArray")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Array]'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"object-is-与-“-”，“-”"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object-is-与-“-”，“-”","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.is() 与 “===”，“==”")]),t._v(" "),e("p",[t._v("两等号判等，会在比较时进行类型转换；运算的规则：")]),t._v(" "),e("ul",[e("li",[t._v("undefined == null，且它俩与所有其他值比较的结果都是 false。")]),t._v(" "),e("li",[t._v("String == Boolean，需要两个操作数同时转为 Number。")]),t._v(" "),e("li",[t._v("String/Boolean == Number，需要 String/Boolean 转为 Number。")]),t._v(" "),e("li",[t._v("Object == Primitive，需要 Object 转为 Primitive（具体通过 valueOf 和 toString 方法）。三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回 false）；\nObject.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，Object.is(NaN, NaN) 会返回 true.\nObject.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(258),alt:""}})])])},[],!1,null,null,null);a.default=n.exports}}]);