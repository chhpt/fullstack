(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{394:function(e,t,a){"use strict";a.r(t);var s=a(28),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[e._v("#")]),e._v(" 性能")]),e._v(" "),a("h2",{attrs:{id:"内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存"}},[e._v("#")]),e._v(" 内存")]),e._v(" "),a("h3",{attrs:{id:"查看内存使用情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看内存使用情况"}},[e._v("#")]),e._v(" 查看内存使用情况")]),e._v(" "),a("p",[e._v("使用 "),a("code",[e._v("process.memoryUsage()")]),e._v(" 可以看到 Node 进程的内存占用情况（单位 Byte）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  rss: 4935680,\n  heapTotal: 1826816,\n  heapUsed: 650472,\n  external: 49879\n}\n")])])]),a("p",[a("code",[e._v("heapTotal")]),e._v(" 和 "),a("code",[e._v("heapUsed")]),e._v(" 对应了 V8 的堆内存使用情况，"),a("code",[e._v("rss")]),e._v(" 是 resident set size 的缩写，即进程的常驻内存部分。"),a("code",[e._v("external")]),e._v(" 是指绑定到 V8 管理的 JavaScript 对象上的 C++ 对象的内存使用情况。")]),e._v(" "),a("p",[e._v("TODO: 搞清堆和栈的区别")]),e._v(" "),a("blockquote",[a("p",[e._v("The heap is where objects, strings, and closures are stored. Variables are stored in the stack and the actual JavaScript code resides in the code segment.")]),e._v(" "),a("p",[e._v("https://stackoverflow.com/questions/12023359/what-do-the-return-values-of-node-js-process-memoryusage-stand-for")])]),e._v(" "),a("h3",{attrs:{id:"堆外内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆外内存"}},[e._v("#")]),e._v(" 堆外内存")]),e._v(" "),a("p",[e._v("通过 process.memoryUsage() 的结果可以看到，堆中的内存用量总是小于进程的常驻内存 量，这意味着 Node 中的内存使用并非都是通过 V8 进行分配的。我们将那些不是通过 V8 分配的内 存称为堆外内存。")]),e._v(" "),a("p",[e._v("是 Buffer 对象不同于其他对象，它不经过V8的内存分配机制，所以也不会有堆内存的大小限制。")]),e._v(" "),a("h3",{attrs:{id:"内存泄漏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[e._v("#")]),e._v(" 内存泄漏")]),e._v(" "),a("p",[e._v("内存泄漏的情况，其实质只有一个，那就是应当回收的对象出现意外而没有被回收，变成了常驻在老生代中的对象。通常，造成内存泄漏的原因有如下几个")]),e._v(" "),a("ol",[a("li",[e._v("缓存：慎将内存当做缓存，为了解决缓存中的对象永远无法释放的问题，需要加入一种策略来限制缓存的无限增长，参考："),a("a",{attrs:{href:"https://github.com/isaacs/node-lru-cache",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/isaacs/node-lru-cache"),a("OutboundLink")],1),e._v("。采用进程外缓存，如，Redis、Memcached，进程自身不存储状态。注意模块缓存，由于模块的缓存机制，模块是常驻老生代的。在设计模块时，要十分小心内存泄漏的出现。")]),e._v(" "),a("li",[e._v("队列消费不及时：关注队列状态，及时处理堆积。")]),e._v(" "),a("li",[e._v("作用域未释放：闭包等。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);