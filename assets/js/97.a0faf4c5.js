(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{351:function(v,_,t){"use strict";t.r(_);var l=t(28),e=Object(l.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"操作系统"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[v._v("#")]),v._v(" 操作系统")]),v._v(" "),t("h2",{attrs:{id:"线程与进程的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程与进程的区别"}},[v._v("#")]),v._v(" 线程与进程的区别")]),v._v(" "),t("ol",[t("li",[v._v("一个程序至少有一个进程，一个进程至少有一个线程。")]),v._v(" "),t("li",[v._v("线程的划分尺度小于进程，使得多线程程序的并发性高。")]),v._v(" "),t("li",[v._v("进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。")]),v._v(" "),t("li",[v._v("每个线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。")]),v._v(" "),t("li",[v._v("从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看作多个独立的应用，来实现进程的调度和管理以及资源分配。")]),v._v(" "),t("li",[v._v("进程就好比工厂的车间，它代表 CPU 所能处理的单个任务。任一时刻，CPU 总是运行一个进程，其他进程处于非运行状态。")]),v._v(" "),t("li",[v._v("线程就好比车间里的工人。一个进程可以包括多个线程。")]),v._v(" "),t("li",[v._v("车间的空间是工人们共享的，这象征一个进程的内存空间是共享的，每个线程都可以使用这些共享内存。")]),v._v(" "),t("li",[v._v("可是，有些房间最多只能容纳一个人，比如厕所。里面有人的时候，其他人就不能进去了。这代表一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。")]),v._v(" "),t("li",[v._v('一个防止他人进入的简单方法，就是门口加一把锁。先到的人锁上门，后到的人看到上锁，就在门口排队，等锁打开再进去。这就叫"互斥锁"（Mutual exclusion，缩写 Mutex），防止多个线程同时读写某一块内存区域。')]),v._v(" "),t("li",[v._v("还有些房间，可以同时容纳 n 个人，比如厨房。也就是说，如果人数大于 n，多出来的人只能在外面等着。这好比某些内存区域，只能供给固定数目的线程使用。")]),v._v(" "),t("li",[v._v('这时的解决方法，就是在门口挂 n 把钥匙。进去的人就取一把钥匙，出来时再把钥匙挂回原处。后到的人发现钥匙架空了，就知道必须在门口排队等着了。这种做法叫做"信号量"（Semaphore），用来保证多个线程不会互相冲突。')]),v._v(" "),t("li",[v._v("不难看出，mutex 是 semaphore 的一种特殊情况（n=1 时）。也就是说，完全可以用后者替代前者。但是，因为 mutex 较为简单，且效率高，所以在必须保证资源独占的情况下，还是采用这种设计。")])]),v._v(" "),t("p",[t("strong",[v._v("操作系统的设计，因此可以归结为：")])]),v._v(" "),t("ul",[t("li",[v._v("以多进程形式，允许多个任务同时运行；")]),v._v(" "),t("li",[v._v("以多线程形式，允许单个任务分成不同的部分运行；")]),v._v(" "),t("li",[v._v("提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源。")])])])}),[],!1,null,null,null);_.default=e.exports}}]);